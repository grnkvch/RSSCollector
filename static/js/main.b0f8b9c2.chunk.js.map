{"version":3,"sources":["logo.svg","redux/reducers/content.js","redux/reducers/index.js","redux/actionTypes.js","redux/store.js","helpers/dataConditioner.js","helpers/formQuery.js","redux/actions.js","redux/selectors.js","components/ItemCard/index.js","components/ItemCard/ItemCard.js","components/SourceButton/index.js","components/SourceButton/SourceButton.js","components/ControlPanel/index.js","components/ControlPanel/ControlPanel.js","components/Content/Content.js","components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","content","sources","Map","combineReducers","state","action","type","payload","sourceList","map","item","source","newList","set","get","createStore","rootReducer","applyMiddleware","thunk","dataConditioner","arr","n","itemTransform","initial","Array","counter","reduce","acc","push","formQuery","queryString","forEach","checked","console","log","addContent","addSource","toggleSource","fetchContent","dispatch","getState","a","axios","data","fetchSource","getSources","getContent","ItemCard","props","key","link","className","href","target","rel","sourceTitle","Date","pubDate","toLocaleString","year","month","day","toLocaleTimeString","thumbnail","src","alt","style","width","height","title","SourceButton","onClick","children","ControlPanel","controls","mapDispatchToProps","actions","Content","connect","ownProps","useState","columnCount","setColumnCount","setContent","useEffect","setCount","document","querySelector","offsetWidth","Math","floor","window","addEventListener","isArray","maxWidth","App","Boolean","location","hostname","match","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0f8b9c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import {\r\n  FETCH_CONTENT,\r\n  FETCH_SOURCE,\r\n  ADD_CONTENT,\r\n  ADD_SOURCE,\r\n  TOGGLE_SOURCE\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  content: [],\r\n  sources: new Map(),\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_CONTENT: {\r\n      const { content } = action.payload;\r\n      return {\r\n        ...state,\r\n        content,\r\n      };\r\n    }\r\n    case ADD_SOURCE: {\r\n      const { sources } = state;\r\n      const { sourceList } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        sources: new Map([\r\n          ...sources,\r\n          ...sourceList.map(item => [item, true]),\r\n        ])\r\n      };\r\n    }\r\n    case TOGGLE_SOURCE: {\r\n      const { sources } = state;\r\n      const { source } = action.payload;\r\n\r\n      const newList = new Map(sources);\r\n\r\n      newList.set(source, !newList.get(source));\r\n\r\n      return {\r\n        ...state,\r\n        sources: newList,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport content from './content';\r\n\r\nexport default combineReducers({ content });","export const FETCH_CONTENT = \"FETCH_CONTENT\";\r\nexport const FETCH_SOURCE = \"FETCH_SOURCE\";\r\n\r\nexport const ADD_CONTENT = \"ADD_CONTENT\";\r\nexport const ADD_SOURCE = \"ADD_SOURCE\";\r\n\r\nexport const TOGGLE_SOURCE = \"TOGGLE_SOURCE\";","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk));","export default function dataConditioner(arr, n, itemTransform) {\r\n  const initial = new Array(n);\r\n\r\n  let counter = 0;\r\n  return arr.reduce((acc, item) => {\r\n    if (!acc[counter]) acc[counter] = [];\r\n    acc[counter].push(itemTransform ? itemTransform(item) : item);\r\n    counter += 1;\r\n    if (counter > n - 1) counter = 0;\r\n    return [...acc];\r\n  },\r\n    initial)\r\n}","export default function formQuery(sources = new Map()) {\r\n  let queryString = `https://rss-collector-back.herokuapp.com/?`;\r\n  sources.forEach((checked, source) => {\r\n    if (checked) queryString += `source[]=${source}&`\r\n  });\r\n  console.log('formQuery', queryString);\r\n  return queryString;\r\n}","import axios from 'axios';\r\n\r\nimport {\r\n  FETCH_CONTENT,\r\n  FETCH_SOURCE,\r\n  ADD_CONTENT,\r\n  ADD_SOURCE,\r\n  TOGGLE_SOURCE,\r\n} from \"./actionTypes\";\r\n\r\nimport formQuery from '../helpers/formQuery';\r\n\r\nexport const addContent = content => ({\r\n  type: ADD_CONTENT,\r\n  payload: { content }\r\n});\r\n\r\nexport const addSource = sourceList => ({\r\n  type: ADD_SOURCE,\r\n  payload: { sourceList }\r\n});\r\n\r\nexport const toggleSource = source => ({\r\n  type: TOGGLE_SOURCE,\r\n  payload: { source }\r\n});\r\n\r\nexport const fetchContent = () => {\r\n  return async function (dispatch, getState) {\r\n    const { content: { sources } } = getState();\r\n\r\n    const { data: content } = await axios.get(formQuery(sources));\r\n\r\n    console.log('content', content);\r\n\r\n    debugger\r\n    dispatch(addContent(content))\r\n    return content;\r\n  }\r\n};\r\n\r\nexport const fetchSource = () => {\r\n  return async function (dispatch) {\r\n    const { data: sourceList } = await axios.get('https://rss-collector-back.herokuapp.com/get-sources');\r\n    console.log('sourceList', sourceList);\r\n    dispatch(addSource(sourceList))\r\n    return sourceList;\r\n  }\r\n};","export const getSources = state => state.content.sources;\r\nexport const getContent = state => state.content.content;","import ItemCard from \"./ItemCard\";\r\n\r\nexport default ItemCard;","import React, { useState, useEffect } from \"react\"\r\n\r\nimport \"./ItemCard.css\"\r\n\r\nexport default function ItemCard(props) {\r\n  const { item } = props;\r\n  // console.log('item.pubDate', new Date(item.pubDate).toLocaleString());\r\n  return (\r\n    <a key={item.link} className='card' href={item.link} target='_blank' rel=\"noopener noreferrer\">\r\n      <h4>{item.sourceTitle}</h4>\r\n      <p className='date'>{new Date(item.pubDate).toLocaleString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric' })}<br />\r\n        {new Date(item.pubDate).toLocaleTimeString('ru-RU')}\r\n      </p>\r\n      {!!item.thumbnail && <img\r\n        src={item.thumbnail} alt={`cute random `} style={{ width: '100%', height: '100%' }}\r\n      // onLoad={this.handleImageLoaded.bind(this)}\r\n      // onError={this.handleImageErrored.bind(this)}\r\n      />}\r\n      <p className='description'>{item.title}</p>\r\n    </a >\r\n  )\r\n}","import SourceButton from \"./SourceButton\";\r\n\r\nexport default SourceButton;","import React from \"react\"\r\n\r\nimport \"./SourceButton.css\"\r\n\r\nexport default function SourceButton(props) {\r\n  const { onClick = () => { }, checked } = props;\r\n  return (\r\n    <div onClick={onClick} className={`button ${checked && 'checked'}`}>\r\n      {props.children}\r\n    </div >\r\n  )\r\n}","import ControlPanel from \"./ControlPanel\";\r\n\r\nexport default ControlPanel;","\r\nimport React, { useState, useEffect } from \"react\"\r\n\r\nimport axios from \"axios\"\r\n\r\nimport dataConditioner from \"../../helpers/dataConditioner\"\r\n\r\nimport ItemCard from \"../ItemCard\"\r\nimport SourceButton from \"../SourceButton\"\r\n\r\n\r\nimport \"./ControlPanel.css\"\r\n\r\nconst ControlPanel = props => {\r\n  const { controls, onClick } = props;\r\n\r\n  return (\r\n    <div className=\"control-panel\">\r\n      {[...controls].map(([item, checked]) => (\r\n        <SourceButton\r\n          key={item}\r\n          checked={checked}\r\n          onClick={() => onClick(item)}\r\n        >\r\n          {item}\r\n        </SourceButton>\r\n      ))\r\n      }\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default ControlPanel\r\n","\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useSelector, connect } from 'react-redux'\r\n\r\nimport axios from 'axios'\r\n\r\nimport dataConditioner from '../../helpers/dataConditioner'\r\n\r\nimport * as actions from '../../redux/actions'\r\n\r\nimport { getSources, getContent } from '../../redux/selectors'\r\n\r\nimport ItemCard from '../ItemCard'\r\nimport SourceButton from '../SourceButton'\r\nimport ControlPanel from '../ControlPanel'\r\n\r\n\r\nimport './Content.css'\r\n\r\n\r\nconst Content = props => {\r\n  console.log('props', props);\r\n  const { fetchSource,\r\n    sources,\r\n    toggleSource,\r\n    fetchContent,\r\n    data\r\n  } = props;\r\n\r\n  const [columnCount, setColumnCount] = useState(1);\r\n  const [content, setContent] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const setCount = () => {\r\n      const width = document.querySelector('.content-container').offsetWidth\r\n      console.log('width', width);\r\n      if (!width) return;\r\n      const n = Math.floor(width / 200) < 1 ? 1 : Math.floor(width / 200);\r\n      if (n !== columnCount) setColumnCount(n)\r\n    }\r\n    setCount();\r\n    window.addEventListener('resize', setCount)\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchContent()\r\n  }, [sources])\r\n\r\n  useEffect(() => {\r\n    fetchSource()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!Array.isArray(data)) return;\r\n    setContent(dataConditioner(data, columnCount,\r\n      item => {\r\n        return (<ItemCard item={item} />)\r\n      }));\r\n  }, [columnCount, data])\r\n\r\n  return (\r\n    <div className='container'>\r\n      <ControlPanel\r\n        controls={sources}\r\n        onClick={toggleSource}\r\n      />\r\n      <div className='content-container'>\r\n        {dataConditioner(content).map(item => (<div style={{ maxWidth: `${1 / columnCount * 100}%` }}>{item}</div>))}\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  sources: getSources(state),\r\n  data: getContent(state),\r\n})\r\n\r\nconst mapDispatchToProps = { ...actions }\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Content);\r\n","import Content from \"./Content\";\r\n\r\nexport default Content;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Content from './components/Content'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        RB-NEWS\n      </header>\n      <div style={{ maxWidth: '1160px' }}>\n\n        <Content />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}